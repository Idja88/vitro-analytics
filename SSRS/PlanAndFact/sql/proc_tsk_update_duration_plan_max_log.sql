USE [WSS_Content]
GO

/****** Object:  StoredProcedure [dbo].[TSK_UpdateDurationPlanMaxLog]    Script Date: 06.02.2025 16:07:56 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



create PROCEDURE [dbo].[TSK_UpdateDurationPlanMaxLog]
	@TASK_ID uniqueidentifier,
	@START_PLAN Date,
	@END_PLAN Date,
	@DURATION_PLAN decimal(10,4),
	@IS_NEED_ADD_FULL_TIME bit 

AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	DECLARE @DATE_CURSOR Date = @START_PLAN
	DECLARE @FIRST_DAY_CUR_MONTH Date
	DECLARE @DAY_COUNT int = 0
	DECLARE @AVERAGE_DURATION decimal(10,4)
	DECLARE @DURATION_BEFORE_FIRST_DAY_CUR_MONTH decimal(10,4) = 0

	DECLARE @CALENDAR_DATE Date

	IF (@START_PLAN IS NULL OR @END_PLAN IS NULL OR @START_PLAN > @END_PLAN)
	BEGIN
		RETURN
	END

	if(@DURATION_PLAN is NULL)
	BEGIN
		SET @DURATION_PLAN  = 0
	END

	BEGIN TRANSACTION

	DELETE FROM [TSK_DURATION_PLAN_MAX_LOG] WHERE [TASK_ID] = @TASK_ID and ([DATE] < @START_PLAN  OR [DATE] > @END_PLAN)

	IF (@IS_NEED_ADD_FULL_TIME = 0)
	BEGIN
		SET @FIRST_DAY_CUR_MONTH = DATEADD(DAY,1,EOMONTH(GETDATE(),-1))
		SELECT @DURATION_BEFORE_FIRST_DAY_CUR_MONTH = SUM(DURATION) FROM [TSK_DURATION_PLAN_MAX_LOG]
		WHERE [TASK_ID] = @TASK_ID and [DATE] < @FIRST_DAY_CUR_MONTH

		IF @DURATION_BEFORE_FIRST_DAY_CUR_MONTH IS NULL
				set @DURATION_BEFORE_FIRST_DAY_CUR_MONTH = 0

		IF(@DATE_CURSOR < @FIRST_DAY_CUR_MONTH)	
		BEGIN
			SET @DATE_CURSOR = @FIRST_DAY_CUR_MONTH
		END
	END

	DECLARE @WORKING_DAY_TABLE TABLE ([Date] Date)
	INSERT INTO @WORKING_DAY_TABLE SELECT [Date] FROM [dbo].[TSK_GetWorkingDays] (@DATE_CURSOR, @END_PLAN)

	SET @DAY_COUNT = (SELECT COUNT(*) FROM @WORKING_DAY_TABLE)
	if(@DAY_COUNT IS NOT NULL AND @DAY_COUNT >0)
	BEGIN

		SET @AVERAGE_DURATION = (@DURATION_PLAN - @DURATION_BEFORE_FIRST_DAY_CUR_MONTH)/ CONVERT(decimal(10,4), @DAY_COUNT)

		IF (@AVERAGE_DURATION < 0)
			SET @AVERAGE_DURATION = 0
	
		DECLARE calendarWorkDayCursor CURSOR local static read_only forward_only FOR SELECT [Date]
					FROM @WORKING_DAY_TABLE
	
		OPEN calendarWorkDayCursor
		FETCH NEXT FROM calendarWorkDayCursor INTO @CALENDAR_DATE

		WHILE @@FETCH_STATUS = 0
		BEGIN
			UPDATE [TSK_DURATION_PLAN_MAX_LOG] SET [DURATION] = @AVERAGE_DURATION WHERE TASK_ID = @TASK_ID AND [DATE] = @CALENDAR_DATE
		
			IF (@@ROWCOUNT = 0)
			BEGIN
				INSERT INTO [TSK_DURATION_PLAN_MAX_LOG] ([TASK_ID] ,[DURATION] ,[DATE])
				VALUES (@TASK_ID, @AVERAGE_DURATION, @CALENDAR_DATE)
			END

			FETCH NEXT FROM calendarWorkDayCursor INTO @CALENDAR_DATE
		END

		close calendarWorkDayCursor
		deallocate calendarWorkDayCursor

	END

	COMMIT

END

/****** Object:  UserDefinedFunction [dbo].[TSK_GetWorkingDays]    Script Date: 20.05.2022 9:06:29 ******/
SET ANSI_NULLS ON


GO

