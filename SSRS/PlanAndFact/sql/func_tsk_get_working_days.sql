USE [WSS_Content]
GO

/****** Object:  UserDefinedFunction [dbo].[TSK_GetWorkingDays]    Script Date: 06.02.2025 16:08:49 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE FUNCTION [dbo].[TSK_GetWorkingDays] (@START_PLAN Date, @END_PLAN Date)
RETURNS
 @returnList TABLE ([Date] Date)
AS	
BEGIN

DECLARE @DATE_CURSOR Date = @START_PLAN
DECLARE @CALENDAR_DATE Date
DECLARE @IS_WORKING_DAY bit 
DECLARE @WORKING_DAY bit = 1

DECLARE @SATURDAY int = 7
DECLARE @SUNDAY int = 1

DECLARE currCalendarCursor CURSOR local static read_only forward_only FOR SELECT  VitroBaseCalendarDate, VitroBaseIsWorkingDay
				FROM QRY_VITRO_PLANNER_CALENDAR_EXCLUDE_LIST
				where QRY_VITRO_PLANNER_CALENDAR_EXCLUDE_LIST.VitroBaseCalendarDate >= @START_PLAN and QRY_VITRO_PLANNER_CALENDAR_EXCLUDE_LIST.VitroBaseCalendarDate <= @END_PLAN
				order by QRY_VITRO_PLANNER_CALENDAR_EXCLUDE_LIST.VitroBaseCalendarDate

	OPEN currCalendarCursor
    FETCH NEXT FROM currCalendarCursor INTO @CALENDAR_DATE, @IS_WORKING_DAY

	WHILE (@DATE_CURSOR <= @END_PLAN)
	BEGIN
		IF (@DATE_CURSOR = @CALENDAR_DATE)
		BEGIN
			IF(@IS_WORKING_DAY = @WORKING_DAY)
			BEGIN

				INSERT INTO @returnList 
				SELECT @DATE_CURSOR
			END
			WHILE @@FETCH_STATUS = 0 AND @CALENDAR_DATE <= @DATE_CURSOR
			BEGIN
				FETCH NEXT FROM currCalendarCursor INTO @CALENDAR_DATE, @IS_WORKING_DAY
			END
		END
		ELSE
		BEGIN
			IF (DATEPART(dw, @DATE_CURSOR) != 7 AND DATEPART(dw, @DATE_CURSOR) != 1)
			BEGIN
				INSERT INTO @returnList 
				SELECT @DATE_CURSOR
			END
		END

		SET @DATE_CURSOR = DATEADD(DAY, 1, @DATE_CURSOR)
	END

	DEALLOCATE currCalendarCursor

 RETURN
END


GO

